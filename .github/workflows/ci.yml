name: First Github Action

on:
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: install dependencies
        run: npm ci

      - name: build project
        run: npm run build

      - name: check test
        id: check_test_files
        run: |
          if ls src/**/*.test.js; then
            echo "tests files found"
            echo "tests-found=true" >> $GITHUB_ENV
          else
            echo "no test file found"
            echo "tests-found=false" >> $GITHUB_ENV
          fi

      - name: run test
        if: env.tests-found == 'true'
        run: npm test

      - name: Merge PR
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { owner, repo } = context.repo;
              const pull_number = context.payload.pull_request.number;

              // Attempt to merge the pull request using the squash method.
              const response = await github.rest.pulls.merge({
                owner: owner,
                repo: repo,
                pull_number: pull_number,
                merge_method: "squash"
              });

              // Check if the merge was successful
              if (response.status === 200) {
                const message = `Hello @${context.payload.pull_request.user.login}, congratulations! You have successfully submitted a pull request.`;

                // Post the message on the PR
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: pull_number,
                  body: message
                });
              }
            } catch (error) {
              console.error(`Failed to merge PR: ${error.message}`);
              core.setFailed(error.message);
            }
